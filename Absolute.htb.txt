Absolute.HTB
============

Hello Again. Let's work on sharping windows security skills again. I'm going to perform enumeration, attack and privilege escalation on Absolute Hack The Box Windows machine. The following walkthrough may help you to get through this insane level machine.

I'm going to run the following nmap command to enumerate the Absolute Windows Machine.

<<NMAP_RESULT>>

Couple of interesting things to note from the above Nmap results.
	* Port 80 is open and running Microsoft IIS httpd 10.0 with TRACE method enabled.
	* Domain: absolute.htb0 and DNS:dc.absolute.htb.
	* Port 389,636 and 3269 is running Windows Active Directory LDAP 
	* SMB is enabled too (smb2)

This gives us strong indication that this machine would be mix of LDAP or Kerberos authentication. Before we reach there, we will do follownig two things.
	* Adding host entries for absolute.htb in the host file. 
	* We'll export port 80 using our browser.

<<<<<<<<<<<<HOST FILE>>>>>>>>>>>


<<Blog6_port80_IMG IMAGE>>

Port 80 hosting a simple web page with multiple images. Upon looking at the source code, I can see those multiple images. Let's downlaod them all at once using the following little command.

Command: # for i in {1..6}; do wget http://10.10.11.181/images/hero_$i.jpg; done

Now using the exiftool we are going to extract the metadata for each image. 

Commnad: exiftool *.jpg

Looking at the result carefully, I think there will be two set of fields from the above command which might be interested to us. 
Author and Artist.

Each of the image we downloaded has these two field with different names. I think these are our possible users on our target machine. Let's save all these names in a text file.

<<AUTHOR & ARTIST>>

From here we can use a tool like username-anarchy [https://github.com/urbanadventurer/username-anarchy#username-anarchy] to generate the possible username format. It can be firstname.lastname flastname firstnamel or firstnamelastname. Clone the repository in your local directory and run the following command

Commands:	git clone https://github.com/urbanadventurer/username-anarchy#username-anarchy
			# ruby username-anarchy -i possible_usernames -f flast,lfirst,f.last > username_formated 


possible_username is our text  file where all the Author names and Artist name are stored. The username_formated file will look something like this afterwards.

At this stage I ran the dirbuster and nikto to see if there's any vulnerability on the port 80 but there was not any interesting directory present also the nikto result returns few low vulnerability such as Clickjacking. I dig up a little hard with few other tools but have no luck. So I was thinking to use Impacket-GetNPUsers [https://github.com/fortra/impacket/blob/master/examples/GetNPUsers.py] to see if there's any user with Kerberos Pre-Authentication disabled. User accounts with Kerberos Pre-Authentication disabled are allowed to request a ticket granting ticket (TGT) from the Key Distribution Center (KDC) without providing password. 

<<<<<GetNPUsers>>>>>

so we got our TGT for the first user Donald Klay. Also, we got the validation of our username format which is f.lastname. However, these tickets are encrpyted using password so we would first need to crack the TGT to obtain the user password. Let's use hashcat to do that.

<<<<<<<<<<<TGT_CRACKED>>>>>>>>>>>>>>..

Bingo! We successfully cracked the password using hashcat from the obtained TGT. Let's use WinRM to ssh into the system.

<<<<<Failed_SSH for d.klay>>>>>>>>>>>

We were getting error while ssh into the user d.klay. While doing a little Google on the error I found that "user might not belonging to domain name that is allowed to ssh into the system". I am assuming that it might be the case here. Trying to think what we can do here. let's do ldapsearch using this valid credentials. 

command: ldapsearch -H ldap://10.10.11.181/ -x -D d.klay@absolute.htb -w Darkmoonsky248girl

<<LDAP_FAILED>>

Upon trying ldapsearch using the valid credentials, I was getting an error which says 'Invalid Credentials' however I was not convience with the error as we have cracked the password. Upon doing a quick google on the error hex code that was written in the output above after the word 'data', I found that it might be possible that the user is a part of protected windows group which doesn't have permission to perform things like ldapsearch. Members of such protected group got additonal set of security such as NTLM login disabled which makes it little more difficult for us to get around. So now our next option is Kerberos. 

I would strongly suggest to sync up your machine clock with the target's local machine time. We have had the target machine time in our nmap scan output. Look at the nmap scan result for port 88.

Earlier we did not sync up the clock because we were passing -no-pass option in our GetNPUsers command to check if we can obtain the TGT for any users for which the Kerberos Pre-Auth is disabled. Next, we have to request a valid TGT using Impacket-getTGT from our attacking machine.

Command: impacket-getTGT absolute.htb/d.klay:Darkmoonsky248girl -dc-ip dc.absolute.htb

<<<<KERB_TGT_GETTGT>>>>>>>>


Now we will use the ldapsearch again with d.klay.ccache Kerberos TGT that we have just obtained. So we are going to force ldapsearch to use Kerberos Authentication instead of NTLM authentication.


<<<LDAPSEARCH_USING_KERB_ERROR>>>>

Upon doing little google on the error, I found that libsasl2-modules-gssapi-mit package was not installed on my kali machine. I simply installed it using apt-get install libsasl2-modules-gssapi-mit. You would also need to make sure kinit package is installed.

<<<<<LDAPSEARCH_USING_KERB_ERROR_2>>>

I still got some error saying that my credentials are not valid. Upon doing google search on GSSAPI Generic Error, I learned that I would need to setup realm in the Kerberos Config file (/etc/krb5.conf) to work it out. Here's my realm config in /etc/krb5.conf file

<<<KRB5.CONF>>>>

Looks like we have setup everything we need so let's just try te ldapsearch command again. 

<<<SMB_CREDS>>>


The output was too long to post here so I have posted some important parts of the output file. It looks like we've obtained the creds for the smb user. Let us sync up the clock again and request a TGT for the svc_smb user.

<<<<<<TGT FOR SMB>>>>>>>


At this stage we can use the smbclient from Impacket to interact with the SMB service, using the ticket we just acquired. I was getting 'KDC_ERR_PREAUTH_FAILED(Pre-authentication information was invalid)' error each time when using impacket-smbclient so there were few things that helped me to solve that issue.

	*	klist to verify the default cache is pointing towards svc_smb.ccache. just type klist in the terminal
	*	make sure your environment variable is set. Mine was export KRB5CCNAME=/tmp/krb5/svc_smb.ccache. 
	*	Make sure you copy your svc_smb.ccache into /tmp/krb5 directroy
	*	if you need to destroy the default creds ccache then use 'kdestroy' command and then set the environment variable again and verify using klist command.

All right, so now we got the SMB access.

<<<<<<<SMB_SERVICE_INTERACTiON>>>>


Other than the defaul shares, I notice that 'Shared' was present so I go inside that share and explore. We have compiler.sh and test.exe file present. We still don't know what it is. However, we get download these two files and perform our enumerations on it. I tried to look what's inside the compiler.sh.

<<<<COMPILER.SH>>>>>>>>>>>>>>.

Let me define what this compiler.sh file contains.
	* Nim is a compiler and can generate the executables for all the platforms. So my guess is that the test.exe is a generated executable using the nim project.
	* -c switch defines that it should compiled project with default code generater. [https://nim-lang.org/docs/nimc.html#introduction]
	* -d defines the Symbols for the code execution. [https://nim-lang.org/docs/nimc.html#introduction]
	* -app defines the type of app. It can be GUI, Console, Static library, DLL etc.
	* -cc defines the compiler. In our case, it's a gcc. So my guess is that it could be a C application.
	* -d defines the SYMBOL Value. It can be anything. 
	* $1 enable experimental language feature

Okay so now I need to turn on my Windows machine and run the test.exe. Nothing happens on the screen. So I download the wireshark and run the test.exe again to see if the exe is trying to reach to the target. At this point I had configured htb openvpn on the Windows machine as well. While looking at the packets, I found one LDAP packet which has something interesting for us.


<<<<<Blog6_Wireshark_IMG>>>>


We have obtained the credentials for m.lovegod. But notice the next packet which says 'invalid credentials'. I think the username format is f.lname. We can try out this credentials. But let's first obtained the TGT for this user. Let's try WinRM with this user.

<<<<<<<<<<<<<FAILED_WinrM_MLOVEGOD>>>>>>>>>>>...

I tried WinRM and it failed again. It seems like the journey to get the shell is bit far. However, We can try using python bloodhound. Use the following GitHub repo which supports the Kerberos authentication in Python bloodhound. [https://github.com/jazzpizazz/BloodHound.py-Kerberos]. I enabled the python3 virtual environment and run the following commands to execute the bloodhound using m.lovegod user credentials.

Command: sudo ntpdate -u dc.absolute.htb 

<<<<Bloodhound SUCCESS>>>>


<<<<<<graph2   IMG>>>>>>>>


Looking at the graph after searching for m.lovegod and from the analytics tab click on the "transitive object control" under outbound object control. We can see that the user m.lovegod owns the NETWORK_AUDIT group, which in turn has GenericWrite on Winrm_user who is a member of a group called 'remote management user.' Which means if we manage to reach to the Winrm user, we can use winrm to gain initial shell access on the target machine. One of the way to achieve this is to add m.lovegod user to Network Audit group and performed a shadow credentials attack on the winrm_user. This will work because the m.lovegod has the 'Generic Write' access over the account. In order to add user to the group, we could make the user m.lovegod owner of the group first. To modify the owner of the group, we can use owneredit.py [https://github.com/fortra/impacket/pull/1323/files] from the Impacket suite. Following command will make user m.lovegod the owner of the Network Audit Group.

<<<<<<<<<<Making m.lovegod OWNER>>>>>>>>>>>>>>


Now we have add the m.lovegod in the 'Network Audit' group. Now we will need to use dacledit.py [https://github.com/fortra/impacket/pull/1291] which will allow us the full control of the Network Audio group.

<<<<<<<dacaledit Success>>>>>>>>>>>>>>


This is how I add the WriteMembers permission to m.lovegod. This script doesn’t use any existing ticket, so I’m giving it a full username and password. Now, To add the user to the group, I will use net (which installs with apt-get install samba). The most reliable way to use this is with --use-kerberos=required, though for some reason it asks for a password on each run. Still it works, as m.lovegod isn’t in the group, then I add them as follow. 

<<<<<RPC NET ADDMEM>>>>

At this point, we should have GenericWrite over the winrm_user , so we first check if ADCS is installed, using certipy

<<<ADCS INSTALLED>>>


It seems like ADCS is indeed installed on the system. Since we have GenericWrite and ADCS is installed, we can overwrite the msDS-KeyCredentialLink attribute of the winrm_user user, which is vital for the shadow credential attack, and get a TGT for this user. If you encounter problems at this stage, first of all verify that the user m.lovegod is still part of the Network Audit group using ldapsearch and after you verify that, ask for a new TGT for the user m.lovegod using the getTGT script.

<<<USER FLAG>>>>>>>>>>>


From here, we're going to learn KrbRelay attack [https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html]. This technique was first discussed in a Google Project Zero post on October 2021. During the diggin on htb forums, I found a PoC [https://github.com/cube0x0/KrbRelay] for this attack which Cube0x0 made public.The idea is to relay an authentication request through a server back to the DC to get authenticated for whatever mischief the attacker desires.

For this attack to work, the target must:
	* Not have the Oct 2022 patches;
	* LDAP signing must be disabled (which is the Windows default settings).

Cloning the KrbRelay [https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html] repo and prepare an exe file. Open the repo in VS Code and double click on sln file. Built the exe. 

<<<<<<<<,,,Upload KRBRELAY>>>>>>>>>>>>>>


We execute the CheckPort.exe binary first, to find available ports for the OXID resolver [https://thrysoee.dk/InsideCOM+/ch19f.htm] to run.

The OXID Resolver is a service that runs on every machine that supports COM+. It performs two important duties:

    It stores the RPC string bindings that are necessary to connect with remote objects and provides them to local clients.

    It sends ping messages to remote objects for which the local machine has clients and receives ping messages for objects running on the local machine. This aspect of the OXID Resolver supports the COM+ garbage collection mechanism.

<<<<<<<<<<<PORT 10>>>>>>>>>>>>>>>>.

We also identify that the target is running Windows 10 with 10.0.17763.3406 patch.

Then, we need to find a CLSID [https://learn.microsoft.com/en-us/windows/win32/com/clsid-key-hklm] to specify the service that KrbRelay is going to run in. The CLSIDs vary among Windows versions, but we can typically use the default ones like the CLSID of TrustedInstaller. In order to get the CLSID, You would need to run the following command on the target server.

<<<<<<OBTAINING CLSID>>>>>


You can pick any CLSID which belongs to TrustedInstaller. I'm going to use 8F5DF053-3013-4dd8-B5F4-88214E81C0CF. Now one thing I notice is that we would need interactive session on the target machine. We woud need to use Runas [https://github.com/antonioCoco/RunasCs] utility. The following command will establish the ldap session and will add winrm_user into Administrator group.

<<<<<<<<<<<<LDAP SESSION ESTABLISHED>>>>>>>>>>>.

Once the LDAP session is established, we will need to add the winrm_user into the Administrator group. The following command will make it possible.

<<<<<<<<<<ROOT FLAG>>>>>>>>>>>>>>>>


Got the root flag.

